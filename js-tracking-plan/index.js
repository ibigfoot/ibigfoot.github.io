/**
 * This client was automatically generated by Segment Typewriter. ** Do Not Edit **
 */
/**
 * Ajv is a peer dependency for development builds. It's used to apply run-time validation
 * to message payloads before passing them on to the underlying analytics instance.
 *
 * Note that the production bundle does not depend on Ajv.
 *
 * You can install it with: `npm install --save-dev ajv`.
 */
import Ajv from 'ajv'
/**
 * The default handler that is fired if none is supplied with setTypewriterOptions.
 * This handler will log a warning message to the console.
 */
export const defaultValidationErrorHandler = (message, violations) => {
	const msg = JSON.stringify(
		{
			type: 'Typewriter JSON Schema Validation Error',
			description:
				`You made an analytics call (${message.event}) using Typewriter that doesn't match the ` +
				'Tracking Plan spec.',
			errors: violations,
		},
		undefined,
		2
	)
	console.warn(msg)
}
let onViolation = defaultValidationErrorHandler
let analytics = () => {
	return window.analytics
}
/**
 * Updates the run-time configuration of this Typewriter client.
 *
 * @param {TypewriterOptions} options - the options to upsert
 *
 * @typedef {Object} TypewriterOptions
 * @property {Segment.AnalyticsJS} [analytics] - Underlying analytics instance where analytics
 * 		calls are forwarded on to. Defaults to window.analytics.
 * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
 * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
 * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
 * 		will be logged to stderr.
 */
export function setTypewriterOptions(options) {
	analytics = options.analytics
		? () => options.analytics || window.analytics
		: analytics
	onViolation = options.onViolation || onViolation
}
/**
 * Validates a message against a JSON Schema using Ajv. If the message
 * is invalid, the `onViolation` handler will be called.
 */
function validateAgainstSchema(message, schema) {
	const ajv = new Ajv({ schemaId: 'auto', allErrors: true, verbose: true })
	ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'))
	ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'))
	if (!ajv.validate(schema, message) && ajv.errors) {
		onViolation(message, ajv.errors)
	}
}
/**
 * Helper to attach metadata on Typewriter to outbound requests.
 * This is used for attribution and debugging by the Segment team.
 */
function withTypewriterContext(message = {}) {
	return {
		...message,
		context: {
			...(message.context || {}),
			typewriter: {
				language: 'javascript',
				version: '7.0.1',
			},
		},
	}
}
/**
 * Iterable event
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function emailBounced(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'Iterable event',
		labels: {},
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {
				type: 'object',
			},
		},
		title: 'Email Bounced',
		type: 'object',
	}
	const message = {
		event: 'Email Bounced',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Email Bounced',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Iterable event
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function emailDelivered(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'Iterable event',
		labels: {},
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {
				type: 'object',
			},
		},
		title: 'Email Delivered',
		type: 'object',
	}
	const message = {
		event: 'Email Delivered',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Email Delivered',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Iterable event
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function emailLinkClicked(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'Iterable event',
		labels: {},
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {
				type: 'object',
			},
		},
		title: 'Email Link Clicked',
		type: 'object',
	}
	const message = {
		event: 'Email Link Clicked',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Email Link Clicked',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Iterable Event
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function emailMarkedAsSpam(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'Iterable Event',
		labels: {},
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {
				type: 'object',
			},
		},
		title: 'Email Marked as Spam',
		type: 'object',
	}
	const message = {
		event: 'Email Marked as Spam',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Email Marked as Spam',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Iterable event
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function emailOpened(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'Iterable event',
		labels: {},
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {
				type: 'object',
			},
		},
		title: 'Email Opened',
		type: 'object',
	}
	const message = {
		event: 'Email Opened',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Email Opened',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Iterable event
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function inAppClicked(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'Iterable event',
		labels: {},
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {
				type: 'object',
			},
		},
		title: 'In-App Clicked',
		type: 'object',
	}
	const message = {
		event: 'In-App Clicked',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'In-App Clicked',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Iterable event
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function inAppDelivered(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'Iterable event',
		labels: {},
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {
				type: 'object',
			},
		},
		title: 'In-App Delivered',
		type: 'object',
	}
	const message = {
		event: 'In-App Delivered',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'In-App Delivered',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Iterable event
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function inAppOpened(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'Iterable event',
		labels: {},
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {
				type: 'object',
			},
		},
		title: 'In-App Opened',
		type: 'object',
	}
	const message = {
		event: 'In-App Opened',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'In-App Opened',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Iterable event
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function mobileAppUninstalled(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'Iterable event',
		labels: {},
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {
				type: 'object',
			},
		},
		title: 'Mobile App Uninstalled',
		type: 'object',
	}
	const message = {
		event: 'Mobile App Uninstalled',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Mobile App Uninstalled',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Iterable event
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function pushBounced(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'Iterable event',
		labels: {},
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {
				type: 'object',
			},
		},
		title: 'Push Bounced',
		type: 'object',
	}
	const message = {
		event: 'Push Bounced',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Push Bounced',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Iterable event
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function pushDelivered(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'Iterable event',
		labels: {},
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {
				type: 'object',
			},
		},
		title: 'Push Delivered',
		type: 'object',
	}
	const message = {
		event: 'Push Delivered',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Push Delivered',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Iterable event
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function pushOpened(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'Iterable event',
		labels: {},
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {
				type: 'object',
			},
		},
		title: 'Push Opened',
		type: 'object',
	}
	const message = {
		event: 'Push Opened',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Push Opened',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Iterable event
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function smsBounced(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'Iterable event',
		labels: {},
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {
				type: 'object',
			},
		},
		title: 'SMS Bounced',
		type: 'object',
	}
	const message = {
		event: 'SMS Bounced',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'SMS Bounced',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Iterable event
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function smsDelivered(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'Iterable event',
		labels: {},
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {
				type: 'object',
			},
		},
		title: 'SMS Delivered',
		type: 'object',
	}
	const message = {
		event: 'SMS Delivered',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'SMS Delivered',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Iterable event
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function smsReceived(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'Iterable event',
		labels: {},
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {
				type: 'object',
			},
		},
		title: 'SMS Received',
		type: 'object',
	}
	const message = {
		event: 'SMS Received',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'SMS Received',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Iterable event
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function subscribed(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'Iterable event',
		labels: {},
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {
				type: 'object',
			},
		},
		title: 'Subscribed',
		type: 'object',
	}
	const message = {
		event: 'Subscribed',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track('Subscribed', props || {}, withTypewriterContext(options), callback)
	}
}
/**
 * Iterable event
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function unsubcribed(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		description: 'Iterable event',
		labels: {},
		properties: {
			context: {},
			properties: {
				type: 'object',
			},
			traits: {
				type: 'object',
			},
		},
		title: 'Unsubcribed',
		type: 'object',
	}
	const message = {
		event: 'Unsubcribed',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Unsubcribed',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
const clientAPI = {
	/**
	 * Updates the run-time configuration of this Typewriter client.
	 *
	 * @param {TypewriterOptions} options - the options to upsert
	 *
	 * @typedef {Object} TypewriterOptions
	 * @property {Segment.AnalyticsJS} [analytics] - Underlying analytics instance where analytics
	 * 		calls are forwarded on to. Defaults to window.analytics.
	 * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
	 * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
	 * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
	 * 		will be logged to stderr.
	 */
	setTypewriterOptions,
	/**
	 * Iterable event
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	emailBounced,
	/**
	 * Iterable event
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	emailDelivered,
	/**
	 * Iterable event
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	emailLinkClicked,
	/**
	 * Iterable Event
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	emailMarkedAsSpam,
	/**
	 * Iterable event
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	emailOpened,
	/**
	 * Iterable event
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	inAppClicked,
	/**
	 * Iterable event
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	inAppDelivered,
	/**
	 * Iterable event
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	inAppOpened,
	/**
	 * Iterable event
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	mobileAppUninstalled,
	/**
	 * Iterable event
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	pushBounced,
	/**
	 * Iterable event
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	pushDelivered,
	/**
	 * Iterable event
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	pushOpened,
	/**
	 * Iterable event
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	smsBounced,
	/**
	 * Iterable event
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	smsDelivered,
	/**
	 * Iterable event
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	smsReceived,
	/**
	 * Iterable event
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	subscribed,
	/**
	 * Iterable event
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	unsubcribed,
}
export default new Proxy(clientAPI, {
	get(target, method) {
		if (typeof method === 'string' && target.hasOwnProperty(method)) {
			return target[method]
		}
		return () => {
			console.warn(`⚠️  You made an analytics call (${String(
				method
			)}) that can't be found. Either:
    a) Re-generate your typewriter client: \`npx typewriter\`
    b) Add it to your Tracking Plan: https://app.segment.com/segment-sa/protocols/tracking-plans/rs_1ZsOJLmQyHAlpYihUwxwaTzZJQB`)
			const a = analytics()
			if (a) {
				a.track(
					'Unknown Analytics Call Fired',
					{
						method,
					},
					withTypewriterContext()
				)
			}
		}
	},
})
